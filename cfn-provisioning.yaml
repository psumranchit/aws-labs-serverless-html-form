AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation Stack for Contact-Form

Parameters:
  S3BucketName:
    Type: String
    Description: 's3-bucket-name-for-hosting-index.html'

  ApiGatewayResourceName:
    Type: String
    Default: 'submit'

Resources:
  ### Creating website-hosting bucket ###
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
      WebsiteConfiguration:
        IndexDocument: 'index.html'

  ### Creating CloudFront OriginAccessIdentity ###
  CloudFrontOAI:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Ref S3Bucket

  ### Creating CloudFront distribution with s3-origin ###
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt 'S3Bucket.RegionalDomainName'
            Id: s3-origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        Enabled: 'true'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - POST
            - DELETE
            - PUT
            - PATCH
          TargetOriginId: s3-origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt S3AuthFunction.FunctionMetadata.FunctionARN
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
        DefaultRootObject: index.html
    DependsOn:
      - CloudFrontOAI
      - S3AuthFunction

  ### Creating CloudFront Function for basic authentication ###
  S3AuthFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      FunctionCode: !Sub |
        function handler(event) {
          var authHeaders = event.request.headers.authorization;
          var expected = "Basic dXNlcjpzZWN1cmU=";
          if (authHeaders && authHeaders.value === expected) {
            return event.request;
          }
          var response = {
            statusCode: 401,
            statusDescription: "Unauthorized",
            headers: {
              "www-authenticate": {
                value: 'Basic realm="Enter credentials for this super secure site"',
              },
            },
          };
          return response;
        }
      FunctionConfig:
        Runtime: cloudfront-js-1.0
        Comment: 'Basic Auth for S3 Web-hosting Endpoint'
      Name: "s3-basic-auth"

  ### Updating Bucket policy with CloudFront OAI ###
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'
            Action: 's3:GetObject'
            Resource: !Sub '${S3Bucket.Arn}/*'
    DependsOn: CloudFrontOAI

  ### Creating IAM execution role for lambda function ###
  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      RoleName: !Sub '${AWS::StackName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub "${AWS::StackName}-policy"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}:*'
          - Effect: Allow
            Action:
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            Resource:
            - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}'

  ### Creating Lambda Function ###
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref AWS::StackName
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import time
          import os

          def lambda_handler(event, context):
            # Put-Your-Code-Here
            print(event['name'])
            epoch = time.time()
            tblname = os.environ['tablename']
            ddb = boto3.resource('dynamodb')
            tbl = ddb.Table(tblname)
            tbl.put_item(Item= {
              'name': str(event['name']),
              'email': str(event['email']),
              'comments': str(event['comments']),
              'timestamp': str(epoch)
            })
            return {
              'statusCode': 200,
              'body': json.dumps('Woohoo!!')
            }
      MemorySize: 128
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt 'IamRoleLambdaExecution.Arn'

  ### Creating REST API ###
  RestApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AWS::StackName
      EndpointConfiguration:
        Types:
          - REGIONAL
    DependsOn: LambdaFunction

  ### Creating API Resource ###
  RestApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiGateway
      ParentId: !GetAtt RestApiGateway.RootResourceId
      PathPart: !Ref ApiGatewayResourceName

  ### Creating API POST Method ###
  RestApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}/invocations
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              {"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
              "method.response.header.Access-Control-Allow-Origin": "'*'"}
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            {"method.response.header.Access-Control-Allow-Headers": "true",
            "method.response.header.Access-Control-Allow-Methods": "true",
            "method.response.header.Access-Control-Allow-Origin": "true"}
      ResourceId: !Ref RestApiResource
      RestApiId: !Ref RestApiGateway

  ### Creating API Option Method ###
  RestApiMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationHttpMethod: OPTIONS
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates: {"application/json" : "{\"statusCode\": 200}"}
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              { "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
              "method.response.header.Access-Control-Allow-Origin": "'*'"}
      MethodResponses:
        - ResponseModels: {"application/json": "Empty"}
          StatusCode: '200'
          ResponseParameters:
            {"method.response.header.Access-Control-Allow-Headers": "true",
            "method.response.header.Access-Control-Allow-Methods": "true",
            "method.response.header.Access-Control-Allow-Origin": "true"}
      ResourceId: !Ref RestApiResource
      RestApiId: !Ref RestApiGateway

  ### Deploying API Gateway ###
  RestApiDeploy:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApiGateway
      StageName: prod
    DependsOn:
      - RestApiGateway
      - RestApiMethod
      - RestApiMethodOptions

  ### Creating Lambda Invoke Permission ###
  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AWS::StackName
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApiGateway}/*/POST/${ApiGatewayResourceName}'
    DependsOn: 
      - LambdaFunction
      - RestApiGateway

  ## Creating DynamoDB ###
  DynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: 'name'
          AttributeType: S
        -
          AttributeName: 'timestamp'
          AttributeType: S
      KeySchema:
        -
          AttributeName: 'name'
          KeyType: HASH
        -
          AttributeName: 'timestamp'
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: !Ref AWS::StackName

Outputs:

  CloudFrontDistributionUrl:
    Description: 'CloudFront Distribution URL'
    Value: !GetAtt 'CloudFrontDistribution.DomainName'

  RestApiGatewayInvokeUrl:
    Description: 'API Gateway Invoke URL'
    Value: !Sub "https://${RestApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/${ApiGatewayResourceName}"